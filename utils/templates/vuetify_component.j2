{% set models=[] %}
{# Define template for form #}
<template>
  <v-card>
    <v-card-title>Create new '{{table.name|snake_to_pascal}}'</v-card-title>
    <v-card-text>
        <v-form>
{# Iterate over columns and set input types #}
{%      for column in table.columns %}
{%          if column.name == "links" %}
            <v-card-item><LinkForm :links="links" @updateLinks="updateLinks" ></LinkForm></v-card-item>
{%      elif column.kind == "datetime" %}
            <v-card-item><VueDatePicker label="{{column.name}}" v-model="{{table.name|snake_to_camel}}.{{column.name}}"  hint="{{column.comment}}" persistent-hint></VueDatePicker></v-card-item>
{%      elif column.foreign_key %}
{%          set fk_table = column.foreign_key.split(".")[1]  | snake_to_camel %}
{%          set fk_model = column.foreign_key.split(".")[1]  | snake_to_pascal %}
{%          set fk_key   = column.foreign_key.split(".")[2] %}
{%          set fk_name   = column.foreign_key.split(".")[1] %}
{%          if fk_name not in models %}
{%              set _ = models.append( [fk_name,column.name] ) %}
{%          endif %}
            <v-card-item><v-select :items="{{fk_table}}Options" item-title="name" item-value="{{fk_key}}" label="{{fk_name}}" v-model="{{table.name|snake_to_camel}}.{{column.name|replace("_id","")}}" :hint="{{fk_table}}OptionsHint" return-object persistent-hint></v-select></v-card-item>
{%      else %}
{% if column.kind == "int" %}{%set rules = "integer" %}{%endif%}
{% if column.kind == "int" or column.kind == "float" %}{%set type = 'type="number"' %}{%endif%}
            <v-card-item><v-text-field label="{{column.name}}" v-model="{{table.name|snake_to_camel}}.{{column.name}}" {{type}} hint="{{column.comment}}" persistent-hint></v-text-field></v-card-item>
{% endif %}
{%      endfor %}
        </v-form>
        <v-btn @click="create{{table.name|snake_to_pascal}}">Create {{table.name|snake_to_pascal}}</v-btn>
    </v-card-text>
  </v-card>
</template>

<script>
import * as d3 from 'd3';
import { defineComponent, ref, computed } from 'vue';
import { VCard, VCardTitle, VCardText, VCardItem, VForm, VTextField, VSelect, VBtn } from 'vuetify/lib/components';
import { onBeforeMount, onMounted, onBeforeUpdate, onUpdated, onBeforeUnmount, onUnmounted, onErrorCaptured} from 'vue';
import {useStore} from 'pinia';
import {useRepo} from 'pinia-orm';

import LinkForm from '@/web-components/forms/links';
import VueDatePicker from '@/web-components/pickers/date-picker.vue';


{% for model in models %}
import {{model[0]|snake_to_pascal}} from '@/models/{{model[0]|snake_to_pascal}}';
{% endfor %}

// import model
import {{table.name|snake_to_pascal}} from '@/models/{{table.name|snake_to_pascal}}';

export default defineComponent({
  name: '{{table.name|snake_to_pascal}}Form',
  props: {
  },
  methods:{
    parseLinks (links) {
      let res;
      if( links && links.length > 0 ){
        res = JSON.stringify(links);
      }else{
        res = '';
      }
      return res;
    }
  },
  components: {
    VCard,
    VCardTitle,
    VCardText,
    VCardItem,
    VTextField,
    VSelect,
    VForm,
    VBtn,
    VueDatePicker,
    LinkForm
  },
  setup() {

    // set up links object
    const links = ref([]);
    const updateLinks = (updatedLinks) => {
      console.log("updating links");
      {{table.name|snake_to_camel}}.value.links = updatedLinks;
    }

    // set up repos
{% for model in models %}
    const {{model[0] | snake_to_camel}}Repo = useRepo({{model[0]|snake_to_pascal}});
    const {{model[0] | snake_to_camel}}Options = computed(() => { return {{model[0] | snake_to_camel}}Repo.all() });
    const {{model[0] | snake_to_camel}}OptionsHint = computed(() => {
      if( {{table.name|snake_to_camel}}.value.{{model[1]|replace("_id","")}} !== null ){
        if ( 'description' in {{table.name|snake_to_camel}}.value.{{model[1]|replace("_id","")}} ){
          return {{table.name|snake_to_camel}}.value.{{model[1]|replace("_id","")}}.description;
        }else{
          return "";
        }
      }else{
        return "Select {{model[0]}}";
      }
    } );
{% endfor %}

    const {{table.name|snake_to_camel}}Repo = useRepo({{table.name|snake_to_pascal}});
    const {{table.name|snake_to_camel}} = ref({{table.name|snake_to_camel}}Repo.make());

    // function to create new object and to add to store
    const create{{table.name|snake_to_pascal}} = async () => {
        let valueToSave = {};
        Object.assign(valueToSave,{{table.name|snake_to_camel}}.value);
        await {{table.name|snake_to_camel}}Repo.save(valueToSave);
        reset{{table.name|snake_to_pascal}}();
    };

    const reset{{table.name|snake_to_pascal}} = () => {
        Object.assign({{table.name|snake_to_camel}}.value, {{table.name|snake_to_camel}}Repo.make() );
    };

    return {%raw%}{{%endraw%}

        {{table.name|snake_to_camel}},
        create{{table.name|snake_to_pascal}},
        reset{{table.name|snake_to_pascal}},
        links,
        updateLinks{%if models | length > 0 %},{%endif%}

{% for model in models %}
        {{model[0]|snake_to_camel}}Options, {{model[0]|snake_to_camel}}OptionsHint{% if not loop.last%},{%endif%}

{% endfor %}
{%raw%}    }{%endraw%}

  }
});
</script>
